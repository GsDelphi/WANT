unit uTestClasses;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, TestExtensions,
  Classes, SysUtils,
  JclBase
  ;

type
  TTestCaseSetup = class(TTestSetup)
  public
    constructor Create(ATests: array of ITest); overload;

    procedure Add(ATest: ITest); overload;
    procedure Add(ATests: array of ITest); overload;
  end;

  TCustomTestCase = class(TTestCase)
  protected
    function IsGUI: boolean;
  public
    procedure SetUp; override;
    procedure TearDown; override;
    procedure CheckEquals(expected: array of const; actual: TDynIntegerArray; const Msg: string = ''); overload;
    procedure StatusGUI(const Msg: string);
  end;

implementation

 
{ TCustomTestCase }

procedure TCustomTestCase.CheckEquals(expected: array of const;
  actual: TDynIntegerArray; const Msg: string);
var
  i: Integer;
begin
  CheckEquals(High(expected) + 1, Length(actual), 'Length of arrays are different');
  for i := 0 to Length(actual) - 1 do
    CheckEquals(expected[i].VInteger, actual[i], Format('i = %d', [i]));
end;

function TCustomTestCase.IsGUI: boolean;
begin
  Result := not IsConsole and not IsLibrary;
end;

procedure TCustomTestCase.SetUp;
begin
  inherited;
end;

procedure TCustomTestCase.StatusGUI(const Msg: string);
begin
  if IsGUI then
    Status(Msg);
end;

procedure TCustomTestCase.TearDown;
begin
  inherited;
end;

{ TTestCaseSetup }

procedure TTestCaseSetup.Add(ATest: ITest);
begin
  FTest.Tests.Add(ATest);
end;

procedure TTestCaseSetup.Add(ATests: array of ITest);
var
  i: Integer;
begin
  for i := Low(ATests) to High(ATests) do
    Add(ATests[i]);
end;

constructor TTestCaseSetup.Create(ATests: array of ITest);
begin
  inherited Create(TCustomTestCase.Suite);
  Add(ATests);
end;

end.

